include: resource://Neos.Fusion/Private/Fusion/Root.fusion
include: resource://Neos.Neos/Private/Fusion/Backend/History/Root.fusion

AE.History.HistoryController.index = AE.History:Template {
    account = ${account}
    accounts = ${accounts}
    eventsByDate = ${eventsByDate}
    firstEvent = ${firstEvent}
    nextPage = ${nextPage}
    node = ${node}
    site = ${site}
    sites = ${sites}

    eventRenderer = Neos.Neos:History.EventRenderer
}

prototype(AE.History:Template) < prototype(Neos.Fusion:Template) {
    templatePath = 'resource://AE.History/Private/Templates/History/Index.html'
}

prototype(Neos.Neos:History.EventRenderer).nodeEvent.type = 'AE.History:History.NodeEventRenderer'

prototype(AE.History:History.NodeEventRenderer) < prototype(AE.History:Template) {
    sectionName = 'eventElement'

    account = ${account}
    event = ${event}
    node = ${node}
    site = ${site}

    content = Neos.Fusion:Array {
        @context {
            contentEvents = ${Neos.Array.filterNegated(event.childEvents, 'documentEvent')}
            documentEvents = ${Neos.Array.filter(event.childEvents, 'documentEvent')}
        }

        documentEvents = Neos.Fusion:Collection {
            collection = ${documentEvents}
            itemName = 'event'

            itemRenderer = Neos.Fusion:Case {
                default {
                    condition = true
                    type = ${'Neos.Neos:History.PublishedNode.' + event.eventType}
                }
            }
        }

        content = Neos.Fusion:Case {
            changed {
                condition = ${node == null}
                renderer = Neos.Neos:History.PublishedNode.ContentChanged {
                    @if {
                        documentNotRemoved = ${Array.first(documentEvents).eventType != 'Node.Removed'}
                        hasContentEvents = ${Array.length(contentEvents) > 0}
                    }
                }
            }

            events {
                condition = ${node != null}
                renderer = Neos.Fusion:Collection {
                    collection = ${contentEvents}
                    itemName = 'event'

                    itemRenderer = Neos.Fusion:Case {
                        default {
                            condition = true
                            type = ${'Neos.Neos:History.PublishedNode.' + event.eventType}
                        }
                    }
                }
            }
        }
    }
}

prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
    templatePath = 'resource://AE.History/Private/Templates/History/Index.html'
    sectionName = 'subEventElement'

    @context.eventsOfMatchedType = ${[event]}

    subEventType >
}
